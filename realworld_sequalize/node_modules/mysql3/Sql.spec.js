"use strict";

require("mocha");

var _chai = require("chai");

var Sql = _interopRequireWildcard(require("./Sql"));

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('escapeId', () => {
  it('strings', () => {
    (0, _chai.expect)(Sql.escapeId('foo').toSqlString()).to.equal('`foo`');
    (0, _chai.expect)(Sql.escapeId('foo.bar').toSqlString()).to.equal('`foo.bar`');
    (0, _chai.expect)(Sql.escapeId('foo`bar').toSqlString()).to.equal('`foo``bar`');
  });
  it('arrays', () => {
    (0, _chai.expect)(Sql.escapeId(['foo']).toSqlString()).to.equal('`foo`');
    (0, _chai.expect)(Sql.escapeId(['foo', 'bar']).toSqlString()).to.equal('`foo`.`bar`');
    (0, _chai.expect)(Sql.escapeId(['foo', 'bar', 'baz']).toSqlString()).to.equal('`foo`.`bar`.`baz`');
  });
});
describe('escapeValue', () => {
  it('strings', () => {
    (0, _chai.expect)(Sql.escapeValue('foo bar').toSqlString()).to.equal(`'foo bar'`);
    (0, _chai.expect)(Sql.escapeValue(`foo'bar`).toSqlString()).to.equal(`'foo''bar'`);
    (0, _chai.expect)(Sql.escapeValue(`foo\0bar`).toSqlString()).to.equal(`'foo\\0bar'`);
    (0, _chai.expect)(Sql.escapeValue(`foo\0'"\b\n\r\t\x1A\\%_\v\fbar`).toSqlString()).to.equal("'foo\\0''\"\\b\\n\\r\\t\\Z\\\\%_\v\fbar'");
  });
  it('buffers', () => {
    (0, _chai.expect)(Sql.escapeValue(Buffer.from([0x12, 0xAB])).toSqlString()).to.equal(`x'12ab'`);
  });
  it('numbers', () => {
    (0, _chai.expect)(Sql.escapeValue(4).toSqlString()).to.equal(`4`);
    (0, _chai.expect)(Sql.escapeValue(3.14).toSqlString()).to.equal(`3.14`);
    (0, _chai.expect)(Sql.escapeValue(-9).toSqlString()).to.equal(`-9`);
    (0, _chai.expect)(Sql.escapeValue(2e300).toSqlString()).to.equal(`2e+300`);
  });
  it('bigints', () => {
    (0, _chai.expect)(Sql.escapeValue(18446744073709551616n).toSqlString()).to.equal(`18446744073709551616`);
    (0, _chai.expect)(Sql.escapeValue(-1n).toSqlString()).to.equal(`-1`);
  });
  it('booleans', () => {
    (0, _chai.expect)(Sql.escapeValue(true).toSqlString()).to.equal(`1`);
    (0, _chai.expect)(Sql.escapeValue(false).toSqlString()).to.equal(`0`);
  });
  it('null', () => {
    (0, _chai.expect)(Sql.escapeValue(null).toSqlString()).to.equal(`NULL`);
  });
});
describe('escapeLike', () => {
  it('strings', () => {
    (0, _chai.expect)(Sql.escapeLike('foo%bar')).to.equal(String.raw`foo\%bar`);
    (0, _chai.expect)(Sql.escapeLike('foo_bar')).to.equal(String.raw`foo\_bar`);
    (0, _chai.expect)(Sql.escapeLike('foo\\bar')).to.equal(String.raw`foo\\bar`);
    (0, _chai.expect)(Sql.escapeLike('G%', '!')).to.equal(String.raw`G!%`);
  });
});
describe('as', () => {
  it('object', () => {
    (0, _chai.expect)(Sql.selectAs({
      'aa': 'bb',
      'cc.dd': 'ee.ff'
    }).toSqlString()).to.equal('`aa` AS `bb`, `cc`.`dd` AS `ee.ff`');
    (0, _chai.expect)(Sql.sql.as({
      'aa': 'bb',
      'cc.dd': 'ee.ff',
      x: ['g', 'h']
    }).toSqlString()).to.equal("`bb` AS 'aa', `ee.ff` AS 'cc.dd', `g`.`h` AS 'x'");
  });
  it('array', () => {
    (0, _chai.expect)(Sql.sql.as([['aa', 'bb'], ['cc.dd', 'ee.ff'], [['gg', 'hh'], 'ii']]).toSqlString()).to.equal("`aa` AS 'bb', `cc.dd` AS 'ee.ff', `gg`.`hh` AS 'ii'");
  });
});
describe('set', () => {
  it('object', () => {
    (0, _chai.expect)(Sql.sql.set({
      'aa': 'bb',
      'cc.dd': 5
    }).toSqlString()).to.equal("`aa`='bb', `cc`.`dd`=5");
  });
  it('array', () => {
    (0, _chai.expect)(Sql.sql.set([['aa', 'bb'], ['cc.dd', 5], [['ee', 'ff'], null]]).toSqlString()).to.equal("`aa`='bb', `cc.dd`=5, `ee`.`ff`=NULL");
  });
});
describe('timestamp', () => {
  it('handle timezones', () => {
    (0, _chai.expect)(Sql.timestamp('2019-10-15 17:12:34').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 17:12:34'`);
    (0, _chai.expect)(Sql.timestamp(1571184754000, 'UTC').toSqlString()).to.equal(`TIMESTAMP'2019-10-16 00:12:34'`);
    (0, _chai.expect)(Sql.timestamp('2019-10-15 17:12:34', 'UTC', 'UTC').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 17:12:34'`);
    (0, _chai.expect)(Sql.timestamp('2019-10-15 17:12:34', 'UTC', 'America/Vancouver').toSqlString()).to.equal(`TIMESTAMP'2019-10-16 00:12:34'`);
    (0, _chai.expect)(Sql.timestamp(1571184754000, 'America/Vancouver').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 17:12:34'`);
    (0, _chai.expect)(Sql.timestamp('2019-10-15 17:12:34', 'America/Toronto', 'America/Vancouver').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 20:12:34'`);
    (0, _chai.expect)(Sql.timestamp('2019-10-16T08:32:55.520Z', 'UTC', 'Atlantic/Faroe').toSqlString()).to.equal(`TIMESTAMP'2019-10-16 08:32:55.520'`);
  });
  it('supports Date objects', () => {
    (0, _chai.expect)(Sql.timestamp(new Date('2019-10-16T08:32:55.520Z'), 'UTC').toSqlString()).to.equal(`TIMESTAMP'2019-10-16 08:32:55.520'`);
  });
  it('supports Moment objects', () => {
    (0, _chai.expect)(Sql.timestamp((0, _moment.default)('2019-10-16T08:32:55.520Z'), 'UTC').toSqlString()).to.equal(`TIMESTAMP'2019-10-16 08:32:55.520'`);
    (0, _chai.expect)(Sql.timestamp(_moment.default.tz('2019-10-15 17:12:34', 'America/Vancouver'), 'America/Toronto', 'Atlantic/Faroe').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 20:12:34'`);
  });
  it('to throw for invalid timezones', () => {
    (0, _chai.expect)(() => Sql.timestamp('2019-10-15 17:12:34', 'n0t_Re4L')).to.throw("Invalid output timezone: n0t_Re4L");
    (0, _chai.expect)(() => Sql.timestamp('2019-10-15 17:12:34', 'UTC', 'n0t_Re4L')).to.throw("Invalid input timezone: n0t_Re4L");
    (0, _chai.expect)(() => Sql.timestamp(new Date("gArBaGe^%&"))).to.throw("Input date is not valid");
    (0, _chai.expect)(() => Sql.timestamp(1234567890123, 'America/Godthab', 'Australia/Eucla', 7)).to.throw("fsp out of range");
  });
  it('handle fractional seconds', () => {
    (0, _chai.expect)(Sql.timestamp('2019-10-15T17:12:34.567').toSqlString()).to.equal(`TIMESTAMP'2019-10-15 17:12:34.567'`);
    (0, _chai.expect)(Sql.timestamp(1234567890123, 'America/Godthab').toSqlString()).to.equal(`TIMESTAMP'2009-02-13 20:31:30.123'`);
    (0, _chai.expect)(Sql.timestamp(1234567890123, 'America/Godthab', 'Australia/Eucla', 0).toSqlString()).to.equal(`TIMESTAMP'2009-02-13 20:31:30'`);
    (0, _chai.expect)(Sql.timestamp(1234567890199, 'America/Godthab', 'Australia/Eucla', 1).toSqlString()).to.equal(`TIMESTAMP'2009-02-13 20:31:30.1'`);
    (0, _chai.expect)(Sql.timestamp(1234567890123, 'America/Godthab', null, 6).toSqlString()).to.equal(`TIMESTAMP'2009-02-13 20:31:30.123000'`);
  });
});
describe('timestamp', () => {
  it('handle timezones', () => {
    (0, _chai.expect)(Sql.date('2019-10-15 17:12:34').toSqlString()).to.equal(`DATE'2019-10-15'`);
    (0, _chai.expect)(Sql.date(1571184754000, 'UTC').toSqlString()).to.equal(`DATE'2019-10-16'`);
    (0, _chai.expect)(Sql.date('2019-10-15 17:12:34', 'UTC', 'UTC').toSqlString()).to.equal(`DATE'2019-10-15'`);
    (0, _chai.expect)(Sql.date('2019-10-15 17:12:34', 'UTC', 'America/Vancouver').toSqlString()).to.equal(`DATE'2019-10-16'`);
    (0, _chai.expect)(Sql.date(1571184754000, 'America/Vancouver').toSqlString()).to.equal(`DATE'2019-10-15'`);
    (0, _chai.expect)(Sql.date('2019-10-15 17:12:34', 'America/Toronto', 'America/Vancouver').toSqlString()).to.equal(`DATE'2019-10-15'`);
    (0, _chai.expect)(Sql.date('2019-10-16T08:32:55.520Z', 'UTC', 'Atlantic/Faroe').toSqlString()).to.equal(`DATE'2019-10-16'`);
  });
});
describe('polygon', () => {
  it('supports number pairs', () => {
    (0, _chai.expect)(Sql.polygon([[0, 1], [2, 3], [3, 4], [0, 1]]).toSqlString()).to.equal(`PolyFromText('POLYGON((0 1,2 3,3 4,0 1))')`);
  });
  it('supports points', () => {
    (0, _chai.expect)(Sql.polygon([{
      x: 0,
      y: 1
    }, {
      x: 2,
      y: 3
    }, {
      x: 3,
      y: 4
    }, {
      x: 0,
      y: 1
    }]).toSqlString()).to.equal(`PolyFromText('POLYGON((0 1,2 3,3 4,0 1))')`);
  });
  it('supports latlng', () => {
    (0, _chai.expect)(Sql.polygon([{
      lat: 0,
      lng: 1
    }, {
      lat: 2,
      lng: 3
    }, {
      lat: 3,
      lng: 4
    }, {
      lat: 0,
      lng: 1
    }]).toSqlString()).to.equal(`PolyFromText('POLYGON((0 1,2 3,3 4,0 1))')`);
  });
  it('throws for other types', () => {
    (0, _chai.expect)(() => Sql.polygon([{
      x: 0,
      lng: 1
    }]).toSqlString()).to.throw();
  });
  it('completes the polygon', () => {
    (0, _chai.expect)(Sql.polygon([[0, 1], [2, 3], [3, 4]]).toSqlString()).to.equal(`PolyFromText('POLYGON((0 1,2 3,3 4,0 1))')`);
  });
  it('allows disabling autocomplete', () => {
    (0, _chai.expect)(Sql.polygon([[0, 1], [2, 3], [3, 4]], false).toSqlString()).to.equal(`PolyFromText('POLYGON((0 1,2 3,3 4))')`);
  });
});
describe('point', () => {
  it('encodes points', () => {
    (0, _chai.expect)(Sql.point(4, 3.14).toSqlString()).to.equal(`PointFromText('POINT(4 3.14)')`);
  });
});
describe('insert', () => {
  it('object', () => {
    expectSql(Sql.sql.insert('t', {
      a: 1,
      b: 'foo'
    }), "INSERT INTO `t` SET `a`=1, `b`='foo'");
  });
  it('array', () => {
    expectSql(Sql.sql.insert('t', [['a', 1], ['b', 'foo']]), "INSERT INTO `t` SET `a`=1, `b`='foo'");
  });
  it('ignore', () => {
    expectSql(Sql.sql.insert('t', {
      a: 1,
      b: 'foo'
    }, {
      ignore: true
    }), "INSERT IGNORE INTO `t` SET `a`=1, `b`='foo'");
  });
  it('ignore dupes', () => {
    expectSql(Sql.sql.insert('t', {
      a: 1,
      b: 'foo'
    }, {
      ignoreDupes: true
    }), "INSERT INTO `t` SET `a`=1, `b`='foo' ON DUPLICATE KEY UPDATE `a`=VALUES(`a`)");
  });
  it('update on dupe', () => {
    expectSql(Sql.sql.insert('t', {
      'a.b': 1,
      c: 'foo'
    }, {
      updateOnDupe: true
    }), "INSERT INTO `t` SET `a`.`b`=1, `c`='foo' ON DUPLICATE KEY UPDATE `a`.`b`=VALUES(`a`.`b`), `c`=VALUES(`c`)");
  });
});
describe('interval', () => {
  it('creates intervals', () => {
    (0, _chai.expect)(Sql.interval(1).toSqlString()).to.equal(`INTERVAL 1000 MICROSECOND`);
    (0, _chai.expect)(Sql.interval(1.234).toSqlString()).to.equal(`INTERVAL 1234 MICROSECOND`);
    (0, _chai.expect)(Sql.interval(5, Sql.IntervalUnit.HOUR).toSqlString()).to.equal(`INTERVAL 5 HOUR`);
  });
});

function normalizeSql(sql) {
  return sql.replace(/\s*,\s*/g, ', ');
}

function expectSql(query, result) {
  return (0, _chai.expect)(normalizeSql(query.toSqlString())).to.equal(normalizeSql(result));
}

describe('sql', () => {
  it('autoescapes values', () => {
    (0, _chai.expect)(Sql.sql`select ${4}`.toSqlString()).to.equal(`select 4`);
    (0, _chai.expect)(Sql.sql`select ${4n}`.toSqlString()).to.equal(`select 4`);
    (0, _chai.expect)(Sql.sql`select ${'foo'}`.toSqlString()).to.equal(`select 'foo'`);
    (0, _chai.expect)(Sql.sql`select ${Sql.escapeId('foo')}`.toSqlString()).to.equal('select `foo`');
    (0, _chai.expect)(Sql.sql`select ${Sql.escapeValue('foo')}`.toSqlString()).to.equal(`select 'foo'`);
    (0, _chai.expect)(Sql.sql`select ${Sql.raw('foo')}`.toSqlString()).to.equal('select foo');
    (0, _chai.expect)(Sql.sql`select ${Buffer.from([0x12, 0xAB])}`.toSqlString()).to.equal(`select x'12ab'`);
    (0, _chai.expect)(Sql.sql`select ${Sql.selectAs({
      a: 'b',
      c: '4'
    })}`.toSqlString()).to.equal("select `a` AS `b`, `c` AS `4`");
    expectSql(Sql.sql`select * from t where x in (${[1, 2, 'x']})`, "select * from t where x in (1,2,'x')");
    expectSql(Sql.sql`select * from t where x in (${[1, 2, 'x']})`, "select * from t where x in (1,2,'x')");
  });
  it('prevents classical SQL injection', () => {
    const username = "1' or '1' = '1";
    const password = "1' or '1' = '1";
    (0, _chai.expect)(Sql.sql`SELECT * FROM Users WHERE Username=${username} AND Password=${password}`.toSqlString()).to.equal("SELECT * FROM Users WHERE Username='1'' or ''1'' = ''1' AND Password='1'' or ''1'' = ''1'");
  });
  it("prevents Shift-JIS attack", () => {
    const input = "\x81\x27 OR 1=1 #";
    expectSql(Sql.sql`SELECT * FROM foo WHERE bar = ${input} LIMIT 1`, "SELECT * FROM foo WHERE bar = '\x81'' OR 1=1 #' LIMIT 1");
  });
});
describe('toSqlString', () => {
  it("doesn't add extra backslashes", () => {
    expectSql(Sql.sql`select * from oauth where provider='GOOGLE' and \`key\`=${555}`, "select * from oauth where provider='GOOGLE' and `key`=555");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,