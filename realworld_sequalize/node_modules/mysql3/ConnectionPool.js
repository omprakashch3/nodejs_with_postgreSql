"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectionPool = void 0;

var mysql = _interopRequireWildcard(require("mysql"));

var _Sql = require("./Sql");

var _cliHighlight = _interopRequireDefault(require("cli-highlight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function typeCast(field, next) {
  switch (field.type) {
    case 'DATE':
    case 'DATETIME':
    case 'DATETIME2':
    case 'NEWDATE':
    case 'TIMESTAMP':
    case 'TIMESTAMP2':
      return field.string();

    case 'LONGLONG':
      const numberString = field.string();
      return numberString === null ? null : BigInt(numberString);

    case 'BIT':
      if (field.length === 1) {
        const buf = field.buffer();
        return buf === null ? null : buf[0] === 1;
      }

      break;
  }

  return next();
}

class ConnectionPool {
  constructor(config) {
    this.config = {
      timezone: 'Z',
      charset: 'utf8mb4',
      typeCast,
      ...config
    };
    let {
      sqlMode,
      foreignKeyChecks,
      safeUpdates,
      printQueries,
      initSql,
      ...other
    } = this.config;
    this.pool = mysql.createPool(other);
    const connQueries = initSql ? [...initSql] : [];

    if (sqlMode != null) {
      connQueries.push(_Sql.sql`SET sql_mode=${Array.isArray(sqlMode) ? sqlMode.join(',') : sqlMode}`);
    }

    if (foreignKeyChecks != null) {
      connQueries.push(_Sql.sql`SET foreign_key_checks=${foreignKeyChecks ? 1 : 0}`);
    }

    if (safeUpdates) {
      connQueries.push(_Sql.sql`SET sql_safe_updates=${safeUpdates ? 1 : 0}`);
    }

    if (connQueries.length) {
      this.pool.on('connection', _conn => {
        const conn = this._wrap(_conn);

        for (const query of connQueries) {
          conn.query(query);
        }
      });
    }
  }

  query(query) {
    return this.withConnection(conn => conn.query(query));
  }

  async row(query) {
    const rows = await this.query(_Sql.sql`select * from (${query}) _query limit 1`);
    return rows.length ? rows[0] : null;
  }

  async value(query) {
    const row = await this.row(query);
    if (!row) return null;
    const keys = Object.keys(row);
    if (keys.length !== 1) throw new Error(`Expected exactly 1 field in query, got ${keys.length}`);
    return row[keys[0]];
  }

  async exists(query) {
    return Boolean((await this.value(_Sql.sql`select exists(${query})`)));
  }

  exec(query) {
    return this.withConnection(conn => conn.query(query));
  }

  async *stream(query) {
    const sql = query.toSqlString();

    if (this.config.printQueries) {
      const hisql = (0, _cliHighlight.default)(sql, {
        language: 'sql',
        ignoreIllegals: true
      });
      console.log(hisql);
    }

    let results = [];
    let resolve;
    let promise = new Promise(r => resolve = r);
    let done = false;
    this.pool.query(sql).on('error', err => {
      throw err;
    }).on('result', row => {
      results.push(row);
      resolve();
      promise = new Promise(r => resolve = r);
    }).on('end', () => {
      done = true;
      resolve();
    });

    for (;;) {
      await promise;
      yield* results;
      if (done) break;
      results = [];
    }
  }

  withConnection(callback) {
    return new Promise((resolve, reject) => {
      this.pool.getConnection(async (err, conn) => {
        if (err) return reject(err);

        try {
          resolve(callback(this._wrap(conn)));
        } finally {
          conn.release();
        }
      });
    });
  }

  transaction(callback) {
    if (Array.isArray(callback)) {
      return this.transaction(async conn => {
        const results = await Promise.allSettled(callback.map(sql => conn.query(sql)));
        const mapped = zip(callback, results).map((x, i) => ({
          index: i,
          query: x[0],
          result: x[1]
        }));
        const errors = mapped.filter(r => r.result.status === 'rejected');
        if (errors.length) throw Error(`${errors.length} quer${errors.length === 1 ? 'y' : 'ies'} failed:${errors.map(err => `\n[${err.index}] ${err.query.toSqlString()} :: ${err.result.reason}`).join('')}`);
        return results;
      });
    }

    return this.withConnection(async conn => {
      await conn.query(_Sql.sql`START TRANSACTION`);
      let result;

      try {
        result = await callback(conn);
      } catch (err) {
        await conn.query(_Sql.sql`ROLLBACK`);
        throw err;
      }

      await conn.query(_Sql.sql`COMMIT`);
      return result;
    });
  }

  _wrap(conn) {
    return new PoolConnection(conn, !!this.config.printQueries);
  }

  close() {
    return new Promise((resolve, reject) => {
      this.pool.end(err => {
        if (err) return reject(err);
        resolve();
      });
    });
  }

}

exports.ConnectionPool = ConnectionPool;

function zip(a, b) {
  if (a.length !== b.length) throw new Error("Cannot zip arrays; lengths differ");
  return a.map((x, i) => [x, b[i]]);
}

class PoolConnection {
  constructor(conn, printQueries) {
    this.conn = conn;
    this.printQueries = printQueries;
  }

  query(query) {
    return new Promise((resolve, reject) => {
      const sql = query.toSqlString();

      if (this.printQueries) {
        const hisql = (0, _cliHighlight.default)(sql, {
          language: 'sql',
          ignoreIllegals: true
        });
        console.log(hisql);
      }

      this.conn.query(sql, (error, results, fields) => {
        if (error) return reject(error);
        resolve(results);
      });
    });
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,